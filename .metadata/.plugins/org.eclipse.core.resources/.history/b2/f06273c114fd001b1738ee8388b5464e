package Simulator;

import AppendableBlock.BlockCommit;
import AppendableBlock.Consensus;
import AppendableBlock.FullTransaction;
import AppendableBlock.Node;
import AppendableBlock.Verification;

public class Main {
	
	private final InputConfig p = new InputConfig();

	public static void main(String[] args) {
		
		new Main().run();
		
	}
		
	public void run() {

		for (int i = 0; i<InputConfig.getRuns(); i++) {
			
			// Initialise clock for simulation run.
			double clock = 0;
			
			// Generate pending transactions
			FullTransaction.createTransactions();
			
			// Generate the genesis Block for all miners
			Node.generateGenesisBlock();
			
			// Initiate initial events >= 1 to start with
			BlockCommit.generateInitialEvents();
			
			
			while (!Queue.isEmpty() && (clock <= InputConfig.getSimTime())) {
				Event nextEvent = Queue.getNextEvent();
				
				// Move clock to the time of the event
				clock = nextEvent.getTime();
				
				BlockCommit.handleEvent(nextEvent);
				Queue.removeEvent(nextEvent);

			}
			BlockCommit.processGateawayTransactionPools();
			
			// ############## NEEDS TO BE IMPLEMENTED ################
			
//			// Verify the model
//			if (i == 0 && p.isVerifyImplementation()) {
//				Verification.performChecks();
//			} // Line 64 in main.py
			
			
			// ############## CONSENSUS NOT NEEDED FOR APPENDABLEBLOCK ##############
			
			// Apply the longest chain to resolve the forks
//			Consensus.forkResolution();
			
			
			// ############## NO INCENTIVES IN APPENDABLE BLOCK ##############
			
			// Distribute rewards between the participating nodes
//			Incentives.distributeRewards();
			
			// Calculate the simulation results (e.g block statistics and miners' rewards)
			Statistics.calculate();
			
			// Print results
			Statistics.printToExcel(i, true);
			
			// Reset global variables before next run
			Statistics.reset();
			
			
			
		}
		
	}
	
}
